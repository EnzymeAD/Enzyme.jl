name: CI
on:
  pull_request:
  push:
    branches:
      - main
      - release-*
    tags: '*'
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ matrix.libEnzyme }} libEnzyme - assertions=${{ matrix.assertions }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.version == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.6'
          - '1.7'
          - '1.8'
          - 'nightly'
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        arch:
          - x64
        assertions:
          - false
        libEnzyme: [local, packaged]
        exclude:
          - os: windows-latest
            arch: x64
            libEnzyme: local
        # include:
          # special test with LLVM assertions enabled
          # TODO: enable this across all versions
          #       (needs LLVM.jl fixes, and julia-actions/setup-julia support)
          # - os: ubuntu-latest
          #   arch: x64
          #   libEnzyme: packaged
          #   version: '1.7'
          #   assertions: true
          # - os: ubuntu-latest
          #   arch: x64
          #   libEnzyme: packaged
          #   version: '1.8'
          #   assertions: true
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        if: ${{ ! matrix.assertions }}
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - name: Download Julia with assertions
        if: ${{ matrix.assertions }}
        env:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
        run: |
          wget https://julialangnightlies.s3.amazonaws.com/assert_bin/linux/$arch/$version/julia-latest-linux64.tar.gz
          tar -xvzf julia-latest-linux64.tar.gz
          rm -rf julia-latest-linux64.tar.gz
          echo $PWD/julia-*/bin >> $GITHUB_PATH
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - name: add EnzymeCore
        shell: julia --color=yes --project=. {0}
        run: |
          using Pkg
          Pkg.develop(path="lib/EnzymeCore")
      - name: Build libEnzyme
        if: ${{ matrix.libEnzyme == 'local' && matrix.os != 'macOS-latest'}}
        run: |
          julia --project=deps -e 'using Pkg; Pkg.instantiate()'
          julia --project=deps deps/build_local.jl
          cp LocalPreferences.toml test/
      - name: Build libEnzyme MacOS
        if: ${{ matrix.libEnzyme == 'local' && matrix.os == 'macOS-latest'}}
        run: |
          julia --project=deps -e 'using Pkg; Pkg.instantiate()'
          SDKROOT=`xcrun --show-sdk-path` julia --project=deps deps/build_local.jl
          cp LocalPreferences.toml test/
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - run: |
          julia --project=docs -e '
            using Pkg
            Pkg.develop(path="lib/EnzymeCore")
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()'
      - run: |
          julia --project=docs -e '
            using Documenter: DocMeta, doctest
            using Enzyme
            DocMeta.setdocmeta!(Enzyme, :DocTestSetup, :(using Enzyme); recursive=true)
            doctest(Enzyme)'
      - run: julia --project=docs docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
