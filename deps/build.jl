using BinaryProvider # requires BinaryProvider 0.3.0 or later

TAG = "v0.0.1"
function private_download(prefix, dl_info)
    path = prefix.path
    path = joinpath(path, "downloads")
    !isdir(path) && mkdir(path)

    file, hash = dl_info
    file = basename(file)
    cmd = `fetch --release-asset-checksum-algo=sha256 --repo https://github.com/wsmoses/Enzyme.jl --tag $TAG --release-asset $file --release-asset-checksum $hash $path`
    run(cmd)
end

# Parse some basic command-line arguments
# const verbose = "--verbose" in ARGS
const verbose = true
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["LLVMEnzyme"], :libenzyme),
]

# Download binaries from hosted location
# bin_prefix = "https://github.com/wsmoses/Enzyme.jl/releases/download/v0.0.1"
bin_prefix = "/nonexistant"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/enzyme.v0.0.1.aarch64-linux-gnu-gcc4.tar.gz", "36d7065965690eaf8e04fe4135dfac7101b3939c91ac85d0ef29c1b4ae7c2b50"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/enzyme.v0.0.1.aarch64-linux-gnu-gcc7.tar.gz", "2140b40100bf74ff806344f01fd84f61a844b72982b52e02a5f3c498760bf3f2"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/enzyme.v0.0.1.aarch64-linux-gnu-gcc8.tar.gz", "23941d00231c9b306374c158c9b62e813494387542e427be38fd5f83836be58d"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/enzyme.v0.0.1.arm-linux-gnueabihf-gcc4.tar.gz", "f40e93a3182275eaff00981c67d5964843533bbfd8d03f97c9264683ad5b2896"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/enzyme.v0.0.1.arm-linux-gnueabihf-gcc7.tar.gz", "3d8ce872dc8151361c0cbe64c7e83cc830a83491a13413782975add13537104b"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/enzyme.v0.0.1.arm-linux-gnueabihf-gcc8.tar.gz", "ea50b0cd077363ecc532ad9baad48fa43780af799f43ce2bfae9b9f3455ff585"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/enzyme.v0.0.1.i686-linux-gnu-gcc4.tar.gz", "b9b2c4d5f8f02d016166a0d6ac120b5737fd717f883997c1ffb4d6e832d9ced1"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/enzyme.v0.0.1.i686-linux-gnu-gcc7.tar.gz", "d61978917a92df07abc4a0359a3ddc8d60b1f3c014732e6b393c5775106bc1ef"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/enzyme.v0.0.1.i686-linux-gnu-gcc8.tar.gz", "472eafa72cb42e0f373dc338df32c6d80d67355a5ee22e52b47e96a4b0030b4a"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/enzyme.v0.0.1.powerpc64le-linux-gnu-gcc4.tar.gz", "da9e8d410c7f8a3b4c2fe379cda96160280eb7191cec268b391bcdd43b789c0d"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/enzyme.v0.0.1.powerpc64le-linux-gnu-gcc7.tar.gz", "c320663903bfc750bb6734b156e3a74123760a7bf0f6a9cddc79d5d648db3b05"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/enzyme.v0.0.1.powerpc64le-linux-gnu-gcc8.tar.gz", "f6f2721592057ae20e961ab309d684f5fa3ef7da1e110575ee14cd161e40dc91"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/enzyme.v0.0.1.x86_64-linux-gnu-gcc4.tar.gz", "9f2d8a9011348c6b167fc773a1090ce0190c2331d21f5ab8eea6dc2745bdf0ce"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/enzyme.v0.0.1.x86_64-linux-gnu-gcc7.tar.gz", "5a1e63a9414e13ab04d109b741f9c1321503d1cece5d352496c142a232117843"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/enzyme.v0.0.1.x86_64-linux-gnu-gcc8.tar.gz", "6b4a4dd39e2361eaa61d258eef4d9d9d894c7ef631bf428000e4eea0128adb0d"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/enzyme.v0.0.1.x86_64-linux-musl-gcc4.tar.gz", "58636e38adceedbfbe437e19ac38c5ee6093d2500d667a0888d720dffa351e36"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/enzyme.v0.0.1.x86_64-linux-musl-gcc7.tar.gz", "f2453d9975959ad2fefcf39c432c3aec264ac16c9e323d2826cdb66c293003cd"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/enzyme.v0.0.1.x86_64-linux-musl-gcc8.tar.gz", "10ca5a6422447357d9341dc157a14c8e6c253d707bcb011017ae92284d8dd5a4"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose, isolate=true) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    private_download(prefix, dl_info)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
